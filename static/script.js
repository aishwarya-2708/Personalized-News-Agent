let darkMode = false;

// Dark Mode
function toggleDarkMode(){
Â  darkMode = !darkMode;
Â  document.body.classList.toggle("dark-mode", darkMode);
}

// Toggle Filters
function toggleFilter(){
Â  document.getElementById("filterContent").classList.toggle("show");
}

// Trending topics
function loadTrending(){
Â  const trendingTopics = [
Â  Â  "AI in India",
Â  Â  "Cricket World Cup",
Â  Â  "Stock Market Today",
Â  Â  "SpaceX Launch",
Â  Â  "Health Tech 2025",
Â  Â  "Microsoft AI News",
Â  Â  "India's Economy",
Â  Â  "Global Politics",
Â  Â  "Renewable Energy"
Â  ];
Â  const container = document.querySelector("#trendingList .marquee-content");
Â  container.innerHTML = trendingTopics.map(t=>`<span onclick="searchTopic('${t}')">${t}</span>`).join(' â€¢ ');
}

function searchTopic(topic){
Â  document.getElementById("topicInput").value = topic;
Â  applyFilters();
}

// Fetch news from Flask API
async function applyFilters(){
Â  const topic = document.getElementById("topicInput").value.trim();
Â  if(!topic) return alert("Please enter a topic!");

Â  const language = document.getElementById("language").value;
Â  const region = document.getElementById("region").value;
Â  const category = document.getElementById("category").value;
Â  const dateRange = document.getElementById("dateRange").value;

Â  const newsContainer = document.getElementById("newsContainer");
Â  newsContainer.innerHTML = `<p class="loading">Loading news...</p>`;

Â  try{
Â  Â  const res = await fetch("/get_news", {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: {"Content-Type":"application/json"},
Â  Â  Â  body: JSON.stringify({topic, language})
Â  Â  });
Â  Â  const data = await res.json();

Â  Â  if(data.length===0){
Â  Â  Â  newsContainer.innerHTML = "<p>No news found.</p>";
Â  Â  Â  return;
Â  Â  }

Â  Â  newsContainer.innerHTML = "";

Â  Â  data.forEach(article=>{
Â  Â  Â  const card = document.createElement("div");
Â  Â  Â  card.className = "card";

Â  Â  Â  const bullets = article.summary.map(s=>`<li>${s}</li>`).join("");

Â  Â  Â  card.innerHTML = `
Â  Â  Â  Â  <h3>${article.title}</h3>
Â  Â  Â  Â  <ul>${bullets}</ul>
Â  Â  Â  Â  <div class="actions">
Â  Â  Â  Â  Â  <button onclick="speakText('${article.summary.join('. ')}','${language}')">ðŸ”Š Listen</button>
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  <a href="${article.url}" target="_blank" class="read-more">ðŸ”— Read More</a>
Â  Â  Â  Â  </div>
Â  Â  Â  `;
Â  Â  Â  newsContainer.appendChild(card);
Â  Â  });

Â  }catch(err){
Â  Â  newsContainer.innerHTML = "<p class='error'>Error fetching news.</p>";
Â  Â  console.error(err);
Â  }
}

// TTS
function speakText(text, lang){
Â  let voiceLang = "en-US";
Â  if(lang==="hi") voiceLang="hi-IN";
Â  if(lang==="mr") voiceLang="mr-IN";

Â  const utterance = new SpeechSynthesisUtterance(text);
Â  utterance.lang = voiceLang;
Â  speechSynthesis.speak(utterance);
}

// Share button toggle - FINALIZED FOR FIXED POSITIONING AND CENTERING
function toggleShare(btn){
Â  const options = btn.nextElementSibling;
Â  const isShowing = options.classList.contains('show');

Â  // 1. Close any other open share options
Â  document.querySelectorAll('.share-options.show').forEach(openOption => {
Â  Â  if (openOption !== options) {
Â  Â  Â  openOption.classList.remove('show');
Â  Â  Â  openOption.classList.remove('fixed-position'); // Clean up old fixed position
Â  Â  }
Â  });
Â  
Â  // 2. Toggle the current one
Â  if (!isShowing) {
Â  Â  // Calculate position relative to viewport
Â  Â  const rect = btn.getBoundingClientRect();
    
    // Calculate the left position to center the dropdown under the button
    // Dropdown width is approx 120px (min-width is 120px in CSS)
    const dropdownWidth = 120; 
    const centeredLeft = rect.left + (rect.width / 2) - (dropdownWidth / 2);

    // Apply fixed position and calculated coordinates
Â  Â  options.style.top = `${rect.bottom + 5}px`; // 5px below the button
Â  Â  options.style.left = `${centeredLeft}px`;
Â  Â  options.classList.add('fixed-position');
Â  }

Â  options.classList.toggle("show");
}

// Close filter content and share options when clicking outside
document.addEventListener('click', function(event) {
Â  const filterDropdown = document.querySelector('.filter-dropdown');
Â  const filterContent = document.getElementById('filterContent');
Â  if (filterDropdown && filterContent && !filterDropdown.contains(event.target)) {
Â  Â  filterContent.classList.remove('show');
Â  }

Â  document.querySelectorAll('.share-btn').forEach(shareBtnParent => {
Â  Â  if (!shareBtnParent.contains(event.target)) {
Â  Â  Â  const shareOptions = shareBtnParent.querySelector('.share-options');
Â  Â  Â  if (shareOptions && shareOptions.classList.contains('show')) {
Â  Â  Â  Â  shareOptions.classList.remove('show');
Â  Â  Â  Â  shareOptions.classList.remove('fixed-position'); 
Â  Â  Â  }
Â  Â  }
Â  });
});

// NEW: Function to close dropdown and share when an option is clicked
document.querySelectorAll('.share-options a').forEach(link => {
    link.addEventListener('click', function() {
        // Find the parent .share-options
        const options = this.closest('.share-options');
        if (options) {
            options.classList.remove('show');
            options.classList.remove('fixed-position');
        }
    });
});